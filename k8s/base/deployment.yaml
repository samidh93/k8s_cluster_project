apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-backend
  namespace: todo-app
  labels:
    app: todo-backend
    environment: development
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-backend
      environment: development
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: todo-backend
        environment: development
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: todo-backend-sa

      containers:
      - name: todo-backend
        image: ghcr.io/samidh93/todo-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "development"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://todo-postgres:5432/tododb"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              key: db.username
              name: todo-secrets
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: db.password
              name: todo-secrets
        - name: SERVER_PORT
          value: "8080"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "250m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: app-logs
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-frontend
  namespace: todo-app
  labels:
    app: todo-frontend
    environment: development
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-frontend
      environment: development
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: todo-frontend
        environment: development
        version: v1
    spec:
      serviceAccountName: todo-frontend-sa

      containers:
      - name: todo-frontend
        image: ghcr.io/samidh93/todo-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          protocol: TCP
        env:
        - name: REACT_APP_API_URL
          value: "/api"
        - name: NODE_ENV
          value: "production"
        resources:
          limits:
            cpu: "300m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-nginx
  namespace: todo-app
  labels:
    app: todo-nginx
    environment: development
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-nginx
      environment: development
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: todo-nginx
        environment: development
        version: v1
    spec:
      serviceAccountName: todo-nginx-sa

      containers:
      - name: todo-nginx
        image: ghcr.io/samidh93/todo-nginx:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: "200m"
            memory: "128Mi"
          requests:
            cpu: "100m"
            memory: "64Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-postgres
  namespace: todo-app
  labels:
    app: todo-postgres
    environment: development
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-postgres
      environment: development
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: todo-postgres
        environment: development
        version: v1
    spec:
      serviceAccountName: todo-postgres-sa

      containers:
      - name: todo-postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: "tododb"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: db.username
              name: todo-secrets
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: db.password
              name: todo-secrets
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "250m"
            memory: "256Mi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - tododb
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - tododb
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: todo-postgres-pvc
      - name: init-scripts
        configMap:
          name: todo-init-scripts
