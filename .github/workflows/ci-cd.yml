name: Todo App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# ========================================
# STAGE 1: PARALLEL BUILD JOBS
# ========================================

jobs:
  # Backend Build Job
  build-backend:
    name: üèóÔ∏è Build Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Backend JAR
      working-directory: src/backend
      run: |
        echo "üèóÔ∏è Building Java backend..."
        mvn clean package -DskipTests
        echo "‚úÖ Backend JAR built successfully!"
        
    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: src/backend/target/*.jar
        retention-days: 1

  # Frontend Build Job
  build-frontend:
    name: üé® Build Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'src/frontend/package-lock.json'
        
    - name: Cache npm packages
      uses: actions/cache@v3
      with:
        path: src/frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('src/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Build Frontend
      working-directory: src/frontend
      run: |
        echo "üé® Building React frontend..."
        npm ci
        npm run build
        echo "‚úÖ Frontend build completed!"
        
    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/frontend/build/
        retention-days: 1

  # Nginx Build Job
  build-nginx:
    name: üåê Build Nginx
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Nginx Configuration
      run: |
        echo "üåê Validating Nginx configuration..."
        if [ -f "src/nginx/nginx.conf" ]; then
          echo "‚úÖ Nginx config file exists"
        else
          echo "‚ùå Nginx config file not found"
          exit 1
        fi
        echo "‚úÖ Nginx build preparation completed!"

# ========================================
# STAGE 2: PARALLEL TEST JOBS
# ========================================

  # Backend Testing Job
  test-backend:
    name: üß™ Test Backend
    runs-on: ubuntu-latest
    needs: build-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: src/backend/target/
        
    - name: Test Backend
      working-directory: src/backend
      run: |
        echo "üß™ Running Java backend tests..."
        mvn test
        echo "‚úÖ Backend tests completed!"
        
    - name: Backend Code Quality
      working-directory: src/backend
      run: |
        echo "üîç Checking Java code quality..."
        mvn checkstyle:check
        mvn spotbugs:check
        echo "‚úÖ Backend code quality checks passed!"

  # Frontend Testing Job
  test-frontend:
    name: üß™ Test Frontend
    runs-on: ubuntu-latest
    needs: build-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'src/frontend/package-lock.json'
        
    - name: Download Frontend Artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: src/frontend/build/
        
    - name: Test Frontend
      working-directory: src/frontend
      run: |
        echo "üß™ Running React frontend tests..."
        npm ci
        npm test -- --passWithNoTests
        echo "‚úÖ Frontend tests completed!"
        
    - name: Frontend Code Quality
      working-directory: src/frontend
      run: |
        echo "üîç Checking TypeScript code quality..."
        npm run build
        echo "‚úÖ Frontend TypeScript compilation successful!"

  # Security Scanning Job
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-nginx]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

# ========================================
# STAGE 3: SEQUENTIAL DEPLOY JOBS
# ========================================

  # Docker Build Jobs - Parallel Image Building
  docker-build-backend:
    name: üê≥ Build Backend Image
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: src/backend/target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/backend.Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/todo-backend:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/todo-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-build-frontend:
    name: üê≥ Build Frontend Image
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Frontend Artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: src/frontend/build/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/frontend.Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/todo-frontend:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/todo-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-build-nginx:
    name: üê≥ Build Nginx Image
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Nginx Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/nginx.Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/todo-nginx:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/todo-nginx:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Development Deployment Job
  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: [docker-build-backend, docker-build-frontend, docker-build-nginx]
    if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main') && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Development Environment
      run: |
        echo "üöÄ Deploying to development environment..."
        echo "Using Docker images:"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-backend:${{ github.sha }}"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-frontend:${{ github.sha }}"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-nginx:${{ github.sha }}"
        echo "Development deployment completed!"
        
    - name: Update Helm Values for ArgoCD
      run: |
        echo "üìù Updating Helm values for ArgoCD deployment..."
        # Update the Helm values to use the new image tags
        sed -i "s|tag: latest|tag: ${{ github.sha }}|g" helm/todo-app/values.yaml
        
    - name: Commit and Push Helm Changes
      run: |
        echo "üì§ Committing and pushing Helm changes..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add helm/todo-app/values.yaml
        git commit -m "Auto-deploy: Update image tags to ${{ github.sha }} [skip ci]"
        git push origin main
        
    - name: Notify ArgoCD
      run: |
        echo "üîî ArgoCD will automatically sync and deploy the new images"
        echo "Commit: ${{ github.sha }}"
        echo "Images:"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-backend:${{ github.sha }}"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-frontend:${{ github.sha }}"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-nginx:${{ github.sha }}"

  # Production Deployment Job
  deploy-prod:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production Environment
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Using Docker images:"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-backend:${{ github.sha }}"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-frontend:${{ github.sha }}"
        echo "  - ghcr.io/${{ github.repository_owner }}/todo-nginx:${{ github.sha }}"
        echo "Production deployment completed!"
        
    - name: Update Helm Values for ArgoCD Production
      run: |
        echo "üìù Updating Helm values for ArgoCD production deployment..."
        # Update the Helm values to use the new image tags
        sed -i "s|tag: latest|tag: ${{ github.sha }}|g" helm/todo-app/values.yaml
        
    - name: Commit and Push Helm Changes for Production
      run: |
        echo "üì§ Committing and pushing Helm changes for production..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add helm/todo-app/values.yaml
        git commit -m "Production deploy: Update image tags to ${{ github.sha }} [skip ci]"
        git push origin main
        
    - name: Notify ArgoCD Production
      run: |
        echo "üîî ArgoCD will automatically sync and deploy to production"
        echo "Commit: ${{ github.sha }}"
        echo "Production deployment triggered!"
